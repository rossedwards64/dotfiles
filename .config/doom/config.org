#+BEGIN_SRC emacs lisp
;;; $DOOMDIR/config.org -*- lexical-binding: t; -*-

;; go into elisp mode for syntax highlighting
(add-to-list 'auto-mode-alist '("config.org" . emacs-lisp-mode))

;; window setup
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(alpha . 99))
(set-frame-parameter (selected-frame) 'alpha 99)

(add-to-list 'exec-path "~/bin")
(add-to-list 'load-path "~/.config/emacs/.local/straight/build-29.0.50/sly")

(setq-default window-combination-resize t
              x-stretch-cursor t)

(setq user-full-name "Ross Edwards"
      user-mail-address "redwards64@hotmail.com"
      doom-theme 'doom-ayu-mirage
      doom-font (font-spec :family "Iosevka Nerd Font" :size 16 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Iosevka Nerd Font" :size 16 :weight 'medium)
      doom-big-font (font-spec :family "Iosevka Nerd Font" :size 24 :weight 'medium)
      doom-modeline-enable-word-count t
      doom-modeline-persp-name t
      doom-modeline-persp-icon t
      doom-modeline-hud t
      doom-modeline-height 40
      doom-modeline-bar-width 10
      doom-modeline-major-mode-icon t
      doom-modeline-buffer-encoding t
      doom-modeline-indent-info t
      doom-modeline-display-default-persp-name t
      doom-modeline-unicode-fallback t
      doom-ayu-mirage-brighter-comments t
      lsp-ui-doc-enable t
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-show-with-mouse t
      lsp-headerline-breadcrumb-enable t
      lsp-ui-sideline-enable t
      lsp-ui-sideline-show-code-actions t
      lsp-ui-sideline-show-hover t
      lsp-ui-peek-enable t
      lsp-ui-imenu-enable t
      lsp-ui-imenu-auto-refresh t
      evil-split-window-below t
      evil-vsplit-window-right t
      display-line-numbers-type 'relative
      display-time-day-and-date t
      visible-bell t
      tramp-terminal-type "tramp"
      tramp-default-method "ssh"
      server-use-tcp t
      all-the-icons-scale-factor 1.1
      org-directory "~/Documents/org/"
      org-agenda-files "~/Documents/org/agenda.org"
      org-support-shift-select t
      org-log-done 'time
      org-pretty-entities-include-sub-superscripts t
      org-startup-with-inline-images t
      fancy-splash-image (concat doom-user-dir "logos/nerv.png")
      inferior-lisp-program "/usr/bin/sbcl"
      dired-listing-switches "-alhx --group-directories-first"
      ranger-listing-switches "-alhx --group-directories-first"
      dired-omit-mode t
      dired-hide-details-hide-information-lines t
      dired-hide-details-hide-symlink-targets t
      cider-completion-annotations-include-ns 'always
      tree-sitter-hl-mode t
      doom-localleader-alt-key "C-l")

;; enable modes
(display-time-mode t)
(solaire-global-mode t)
(global-auto-revert-mode t)
(which-function-mode t)
(cursor-sensor-mode t)
(elcord-mode t)
(global-wakatime-mode t)
(pixel-scroll-precision-mode t)

;;; :app everywhere
(after! emacs-everywhere
  (setq emacs-everywhere-frame-name-format "emacs-anywhere")
  (remove-hook 'emacs-everywhere-init-hooks #'hide-mode-line-mode)
  (defadvice! center-emacs-everywhere-in-origin-window (frame window-info)
   :override #'emacs-everywhere-set-frame-position
   (cl-destructuring-bind (x y width height)
     (emacs-everywhere-window-geometry window-info)
     (set-frame-position frame
                   (+ x (/ width 2) (- (/ width 2)))
                   (+ y (/ height 2))))))

(after! doom-themes
  (setq doom-themes-enable-bold t
      doom-themes-enable-italic t
      doom-themes-padded-modeline t)
  (doom-themes-treemacs-config)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))

(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar " " matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs " ")))

(after! elcord
  elcord-use-major-mode-as-main-icon t)

(add-hook! '+doom-dashboard-functions :append
           (insert "\n" (+doom-dashboard--center +doom-dashboard--width "They should make Worm Emacs.")))
(add-hook! '(c-mode-hook c++-mode-hook makefile-mode-hook makefile-gmake-mode-hook)
           #'(lambda ()
               (set (make-local-variable 'compile-command) (format "make -C %s -k" (substring (get-closest-pathname) 0 -8)))))
(add-hook! '(rust-mode-hook)
           #'(lambda ()
               (set (make-local-variable 'compile-command) "cargo build")))
(add-hook! 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
(add-hook! '(cider-mode-hook cider-repl-mode-hook)
     #'cider-company-enable-fuzzy-completion)

(require 'sly-autoloads)
(eval-when-compile
  (require 'cl))

(map! :map meow-leader-keymap
      "l" #'meow-keypad-start)
(map! :leader
      :desc "Switch from header file to source file, or vice versa."
      "z" #'lsp-clangd-find-other-file)
(map! :leader
      :desc "Search for a word in the project."
      "l" #'consult-ripgrep)

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic)
  '(doom-dashboard-banner :foreground "#8a0000" :weight bold)
  '(doom-dashboard-footer :inherit font-lock-constant-face)
  '(doom-dashboard-footer-icon :inherit all-the-icons-red)
  '(doom-dashboard-loaded :inherit font-lock-warning-face)
  '(doom-dashboard-menu-desc :inherit font-lock-string-face)
  '(doom-dashboard-menu-title :inherit font-lock-function-name-face)
  '(mode-line :family "Iosevka" :height 1.0)
  '(mode-line-inactive :family "Iosevka" :height 1.0))

;; makefile
(cl-defun get-closest-pathname (&optional (file "Makefile"))
  "Determine the pathname of the first instance of FILE starting from the current directory towards root.
   This may not do the correct thing in the presence of links.
   If it does not find FILE, then it shall return the name of FILE in the current directory, suitable for creation."
  (let ((root (expand-file-name "/")))
    (expand-file-name file
                      (cl-loop
                        for d = default-directory then (expand-file-name ".." d)
                        if (file-exists-p (expand-file-name file d))
                        return d
                        if (equal d root)
                        return nil))))

;; ligatures
(set-ligatures! 'MAJOR-MODE
    ;; Functional
    :lambda        "lambda keyword"
    :def           "function keyword"
    :composition   "composition"
    :map           "map/dictionary keyword"
    ;; Types
    :null          "null type"
    :true          "true keyword"
    :false         "false keyword"
    :int           "int keyword"
    :float         "float keyword"
    :str           "string keyword"
    :bool          "boolean keyword"
    :list          "list keyword"
    ;; Flow
    :not           "not operator"
    :in            "in operator"
    :not-in        "not in operator"
    :and           "and keyword"
    :or            "or keyword"
    :for           "for keyword"
    :some          "some keyword"
    :return        "return"
    :yield         "yield"
    ;; Other
    :union         "Union keyword"
    :intersect     "Intersect keyword"
    :diff          "diff keyword"
    :tuple         "Tuple Keyword "
    :pipe          "Pipe Keyword"
    :dot           "Dot operator")

(plist-put! +ligatures-extra-symbols
  ;; org
  :name          "»"
  :src_block     "»"
  :src_block_end "«"
  :quote         "“"
  :quote_end     "”"
  ;; Functional
  :lambda        "λ"
  :composition   "∘"
  :map           "↦"
  ;; Other
  :union         "⋃"
  :intersect     "∩"
  :diff          "∖"
  :tuple         "⨂"
  :pipe          ""
  :dot           "•")

#+END_SRC
