#!/usr/bin/env sbcl --script

(defpackage :screenshot
  (:use :cl)
  (:import-from :com.inuoe.jzon)
  (:export main))
(in-package :screenshot)

(defclass window-manager-connection () ()
  (:documentation "Mixin object for window manager IPC handle objects."))

(declaim
 (ftype (function ()
                  (values sb-bsd-sockets:socket &optional))
        connect-to-sway))
(defun connect-to-sway ()
  "Returns a handle to the current Sway instance."
  (let ((swaysock-address (uiop:getenv "SWAYSOCK"))
        (socket (make-instance 'sb-bsd-sockets:local-socket
                               :type :stream)))
    (sb-bsd-sockets:socket-connect socket swaysock-address)))

(defclass sway-connection (window-manager-connection)
  ((magic-string :type list
                 :allocation :class
                 :initform '(#x69 #x33 #x2d #x69 #x70 #x63)
                 :reader magic-string)
   (socket :type sb-bsd-sockets:socket
           :initform (connect-to-sway)
           :reader socket))
   (:documentation "Object containing a handle to the current Sway instance."))

(defgeneric destroy (connection)
  (:documentation "Clean up the window manager IPC connection handle.")
  (:method ((conn sway-connection))
    (with-slots ((sock socket)) conn
      (sb-bsd-sockets:socket-close sock))))

(defgeneric make-message (connection type &optional payload)
  (:documentation "Create a message understable by the window manager IPC.")
  (:method ((conn sway-connection) (type integer) &optional (payload ""))
    (with-slots ((magic magic-string)) conn
      (let* ((length-and-type
               (mapcan (lambda (num)
                         (loop for offset from 0 to 24 by 8
                               collect (logand num (ash #xff offset))))
                       (list (length payload) type)))
             (payload (map 'list #'char-code payload))
             (message (append magic length-and-type payload)))
        (map 'string #'code-char message)))))

(defgeneric send-message (connection message)
  (:documentation "Send a message to the window manager IPC.")
  (:method ((conn sway-connection) (message string))
    (with-slots ((sock socket)) conn
      (progn
        (sb-bsd-sockets:socket-send sock message
                                    (length message))
        (let* ((buf-size (* 8192 4))
               (reply (sb-bsd-sockets:socket-receive sock nil buf-size))
               (reply-start (position-if (lambda (c) (or (equal c #\[) (equal c #\{)))
                                         reply))
               (reply (subseq reply reply-start)))
          (com.inuoe.jzon:parse (remove #\Nul reply)))))))

(defgeneric get-outputs (connection)
  (:documentation "Get a list of outputs.")
  (:method ((conn sway-connection))
    (send-message conn (make-message conn 3))))

(defgeneric find-output (connection pred)
  (:documentation "Search for an output using a predicate.")
  (:method ((conn sway-connection) (pred function))
    (aref (remove-if-not pred (get-outputs conn)) 0)))

(defgeneric get-resolution (output window-manager)
  (:documentation "Get the resolution of the given output.")
  (:method ((output hash-table) (window-manager (eql :sway)))
    (declare (ignorable window-manager))
    (let* ((rect (gethash "rect" output))
           (width (gethash "width" rect))
           (height (gethash "height" rect)))
      (format nil "~ax~a" width height))))

(defgeneric get-geometry (output window-manager)
  (:documentation "Get the location and resolution of the given output.")
  (:method ((output hash-table) (window-manager (eql :sway)))
    (let* ((rect (gethash "rect" output))
           (x (gethash "x" rect))
           (y (gethash "y" rect)))
      (format nil "~a,~a ~a"
              x y (get-resolution output window-manager)))))

(defgeneric get-output-geometry (connection output)
  (:documentation "Get the location and resolution of the named output.")
  (:method ((conn sway-connection) (output string))
    (let ((output (find-output
                   conn
                   (lambda (o) (string-equal output (gethash "name" o))))))
      (get-geometry output :sway))))

(defgeneric get-focused-geometry (connection)
  (:documentation "Get the location and size of the focused output.")
  (:method ((conn sway-connection))
    (let ((output (find-output
                   conn
                   (lambda (o) (eq t (gethash "focused" o))))))
      (get-geometry output :sway))))

(defgeneric get-tree (connection)
  (:documentation "Get a tree containing the workspaces, containers and windows in the session.")
  (:method ((conn sway-connection))
    (send-message conn (make-message conn 4))))

(defgeneric get-position (connection)
  (:documentation "Get the location and size of the currently focused window.")
  (:method ((conn sway-connection))
    (let ((tree (get-tree conn)))
      (labels ((find-focused-window (tree)
                 (let ((nodes (coerce (gethash "nodes" tree) 'list)))
                   (mapcan (lambda (node)
                             (cond
                               ((gethash "focused" node)
                                (let ((rect (gethash "rect" node)))
                                  (format nil "~a,~a ~ax~a"
                                          (gethash "x" rect)
                                          (gethash "y" rect)
                                          (gethash "width" rect)
                                          (gethash "height" rect))))
                               ((not (eq '() nodes))
                                (find-focused-window node))))
                           nodes))))
        (find-focused-window tree)))))

(declaim (ftype (function (&rest string) pathname) resolve-path))
(defun resolve-path (&rest strings)
  (pathname (format nil "~{~a~^/~}" strings)))

(declaim
 (ftype (function (string &key (:body string)
                          (:expire-time number)
                          (:replace boolean)))
        notify-send))
(defun notify-send (header &key (body "") (expire-time 5000) (replace nil))
  (uiop:run-program
   (nconc
    (list "notify-send"
          "-u" "low"
          "-t" (write-to-string expire-time)
          header
          body)
    (when replace (list "-r" "10")))))

(declaim (ftype (function (pathname)) notify-view))
(defun notify-view (filename)
  (notify-send "Copied to clipboard." :body (namestring filename))
  (notify-send
   (if (uiop:file-exists-p filename)
       "Screenshot saved."
       "Screenshot deleted.")))

(declaim (ftype (function (integer)) countdown))
(defun countdown (seconds)
  (loop for i from seconds above 0
        do (notify-send (format nil "Taking shot in: ~a" i))
        do (sleep 1)))

(declaim (ftype (function () string) get-date))
(defun get-date ()
  (multiple-value-bind (second minute hour day month year)
      (get-decoded-time)
    (format nil "~d-~2,'0d-~2,'0d-~2,'0d-~2,'0d-~2,'0d"
            year month day hour minute second)))

(declaim (ftype (function (string) (string)) trim-newlines))
(defun trim-newlines (str)
  (string-trim '(#\Newline) str))

(declaim (ftype (function (string pathname)) take-shot-and-save))
(defun take-shot-and-save (region filename)
  (let* ((region (trim-newlines region))
         (bytes (uiop:run-program
                 (list "grim" "-g" region "-")
                 :output :string
                 :external-format :iso-8859-1)))
    (ensure-directories-exist (directory-namestring filename))
    (with-open-file (in filename :direction :output
                                 :external-format :iso-8859-1
                                 :if-exists :supersede
                                 :if-does-not-exist :create)
      (write-sequence bytes in))
    (with-input-from-string (in bytes)
      (uiop:run-program '("wl-copy" "--type=image/png")
                        :input in
                        :external-format :iso-8859-1))))

(defgeneric take-shot (connection filename type &optional output delay)
  (:documentation "Take a screenshot.")
  (:method :before (conn filename type &optional output delay)
    (declare (ignorable conn filename type output))
    (funcall
     (typecase delay
       (integer #'countdown)
       (float #'sleep)
       (null #'identity))
     delay))
  (:method :after (conn filename type &optional output delay)
    (declare (ignorable conn type output delay))
    (notify-view filename))
  (:method ((conn window-manager-connection) (filename pathname)
            (type (eql :delay)) &optional output (delay 1))
    (declare (ignorable delay))
    (take-shot-and-save (get-output-geometry conn output) filename))
  (:method ((conn window-manager-connection) (filename pathname)
            (type (eql :window)) &optional output (delay 0.5))
    (declare (ignorable output delay))
    (take-shot-and-save (get-position conn) filename))
  (:method ((conn window-manager-connection) (filename pathname)
            (type (eql :area)) &optional output (delay 0))
    (declare (ignorable output delay))
    (let ((region (uiop:run-program '("slurp")
                                    :output '(:string :stripped t))))
      (take-shot-and-save region filename))))

(let ((capture-screen-template " Capture ~a")
      (capture-area " Capture Area")
      (capture-window " Capture Window")
      (take-in-seconds-template " Take in ~as (~a)"))
  (defgeneric make-options (conn)
    (:documentation "Put together a list of possible screenshot options.
If there are multiple outputs, they will be added to the list with corresponding
delay 5s and 3s options.")
    (:method-combination nconc)
    (:method :around (conn)
      (sort (call-next-method) #'string>))
    (:method nconc (conn)
      (list capture-window capture-area))
    (:method nconc ((conn sway-connection))
      (let ((outputs (get-outputs conn)))
        (nconc
         (loop for output across outputs
               for name = (gethash "name" output)
               nconcing
               (nconc
                (list (format nil capture-screen-template name))
                (loop for i from 3 to 5 by 2
                      nconcing (list
                                (format nil
                                        take-in-seconds-template
                                        i name)))))))))

  (declaim
   (ftype (function (string)
                    (values keyword
                            string
                            (or number null)))
          get-screenshot-args))
  (defun get-screenshot-args (option)
    (cond
      ((string= capture-area option) (values :area "" nil))
      ((string= capture-window option) (values :window "" nil))
      ((search "Capture" option)
       (values :delay (third (uiop:split-string option)) 0.5))
      ((search "Take in" option)
       (values :delay
               (remove-if
                (lambda (c)
                  (or (char-equal #\( c)
                      (char-equal #\) c)))
                (fifth (uiop:split-string option)))
               (let ((digit (find-if #'digit-char-p option)))
                 (if (not (null digit))
                     (parse-integer (string digit))
                     (error "Could not get digit.")))))
      (t (error "Invalid option.")))))

(declaim (ftype (function (list) (string)) choose-option))
(defun choose-option (options)
  (with-input-from-string (in (format nil "~{~a~^~%~}" options))
    (multiple-value-bind (output error-output exit-code)
        (uiop:run-program (list "fuzzel" "--dmenu"
                                "-l" (write-to-string (length options)))
                          :input in
                          :output '(:string :stripped t)
                          :ignore-error-status t)
      (declare (ignorable error-output))
      (if (= exit-code 0)
          (trim-newlines output)
          (error "Exiting.")))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let* ((screenshots-dir (resolve-path
                           (uiop:run-program '("xdg-user-dir" "PICTURES")
                                             :output '(:string :stripped t))
                           "Screenshots/"))
         (date (get-date))
         (filename (merge-pathnames
                    (format nil "Screenshot_~a.png" date)
                    screenshots-dir))
         (sway (make-instance 'sway-connection)))
    (unwind-protect (let ((option (choose-option (make-options sway))))
                      (multiple-value-bind (type delay) (get-screenshot-args option)
                        (take-shot sway filename type delay)))
      (destroy sway))))
