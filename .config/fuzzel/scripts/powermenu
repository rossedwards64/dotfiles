#!/usr/bin/env guile
!#

(use-modules (ice-9 popen)
             (ice-9 rdelim)
             (srfi srfi-1)
             (srfi srfi-26))

(define (usage)
  "")

(define shutdown "󰐥 Shutdown")
(define reboot "󰜉 Restart")
(define lock "󰌾 Lock")
(define suspend "󰒲 Sleep")
(define logout "󰩈 Logout")
(define options
  `((shutdown . ,shutdown)
    (reboot . ,reboot)
    (lock . ,lock)
    (suspend . ,suspend)
    (logout . ,logout)))

(define (confirmation)
  (let* ((port (open-input-pipe "fuzzel --dmenu -l1 -p 'Are you sure?: '"))
         (result (read-line port)))
    (close-pipe port)
    result))

(define (confirm-and-perform on-confirm)
  (let* ((answer (confirmation))
         (check-answer
          (cut any (cut string-ci=? <> answer) <>)))
    (cond
     ((check-answer '("y" "yes")) (on-confirm))
     ((check-answer '("n" "no")) #f)
     (else (error "Invalid answer.")))))

(define (uptime)
  (let* ((port (open-input-pipe "uptime -p"))
         (result (read-line port)))
    (close-pipe port)
    (string-drop result 3)))

(define menu-command-template
  "echo \"~a\" | fuzzel --password='' -p \"UPTIME: ~a\" --dmenu -l \"~a\" -w 40")

(define menu-command
  (format #f menu-command-template
          (string-join (map (cut cdr <>) options) "\n")
          (uptime) (length options)))

(define (run-menu)
  (let ((port (open-input-pipe menu-command)))
    (let ((result (read-line port)))
      (close-pipe port)
      (if (eof-object? result)
          #f
          (string->symbol
           (string-downcase
            (cadr (string-split result #\space))))))))

(case (run-menu)
  ((shutdown) (confirm-and-perform (cut system* "systemctl" "poweroff")))
  ((restart) (confirm-and-perform (cut system* "systemctl" "reboot")))
  ((lock) (system* "swaylock"))
  ((sleep) (confirm-and-perform (lambda ()
                                  (system* "playerctl" "pause")
                                  (system* "systemctl" "suspend"))))
  ((logout) (confirm-and-perform
             (cut system* "loginctl" "terminate-user"
                  (let ((port (open-input-pipe (string-join "id -u " (getenv "USER")))))
                    (read-line port)))))
  ((#f) (exit))
  (else (error "Invalid option.")))
